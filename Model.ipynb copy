{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "439b0b58",
   "metadata": {},
   "source": [
    "# Importing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "979d5cdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn import svm\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57f6b530",
   "metadata": {},
   "source": [
    "# Reading dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ac6ac27d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"Preprocess.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5e1d85c",
   "metadata": {},
   "source": [
    "# Label Encoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "894eb2f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4973b502",
   "metadata": {},
   "outputs": [],
   "source": [
    "col = list(df.columns)\n",
    "for i in col:\n",
    "    if type(df[i][0])==str:\n",
    "        le1 = preprocessing.LabelEncoder()\n",
    "        df[i]=le1.fit_transform(df[i])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5164ab8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>County</th>\n",
       "      <th>City</th>\n",
       "      <th>State</th>\n",
       "      <th>Model Year</th>\n",
       "      <th>Make</th>\n",
       "      <th>Model</th>\n",
       "      <th>Electric Vehicle Type</th>\n",
       "      <th>Clean Alternative Fuel Vehicle (CAFV) Eligibility</th>\n",
       "      <th>Electric Range</th>\n",
       "      <th>Base MSRP</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>152</td>\n",
       "      <td>558</td>\n",
       "      <td>39</td>\n",
       "      <td>2018</td>\n",
       "      <td>29</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>215</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>166</td>\n",
       "      <td>643</td>\n",
       "      <td>40</td>\n",
       "      <td>2020</td>\n",
       "      <td>29</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>308</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>166</td>\n",
       "      <td>643</td>\n",
       "      <td>40</td>\n",
       "      <td>2021</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>222</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>35</td>\n",
       "      <td>135</td>\n",
       "      <td>39</td>\n",
       "      <td>2019</td>\n",
       "      <td>29</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>220</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>104</td>\n",
       "      <td>386</td>\n",
       "      <td>39</td>\n",
       "      <td>2014</td>\n",
       "      <td>9</td>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  County  City  State  Model Year  Make  Model  \\\n",
       "0           0     152   558     39        2018    29     68   \n",
       "1           1     166   643     40        2020    29     68   \n",
       "2           2     166   643     40        2021     0     29   \n",
       "3           3      35   135     39        2019    29     68   \n",
       "4           4     104   386     39        2014     9     19   \n",
       "\n",
       "   Electric Vehicle Type  Clean Alternative Fuel Vehicle (CAFV) Eligibility  \\\n",
       "0                      0                                                  0   \n",
       "1                      0                                                  0   \n",
       "2                      0                                                  0   \n",
       "3                      0                                                  0   \n",
       "4                      1                                                  2   \n",
       "\n",
       "   Electric Range  Base MSRP  \n",
       "0             215          0  \n",
       "1             308          0  \n",
       "2             222          0  \n",
       "3             220          0  \n",
       "4              19          0  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf8b1372",
   "metadata": {},
   "source": [
    "# Train Test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6cb97368",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4d0ebe9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(df.drop(['Electric Vehicle Type'],axis=1), df['Electric Vehicle Type'], test_size=0.33, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3435281e",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6900f19c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3ae34eb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LogisticRegression().fit(X_train, y_train.values)\n",
    "pred=clf.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "392e01ad",
   "metadata": {},
   "source": [
    "# Evaluation metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e88f6a30",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_fscore_support as score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8608e220",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic regression model evaluation metrics:\n",
      "Accuracy score: 0.8345516932716694\n",
      "Precision score: 0.8226534519042672\n",
      "Recall score: 0.8345516932716694\n",
      "F1 score: 0.8207555886316418\n"
     ]
    }
   ],
   "source": [
    "print(\"Logistic regression model evaluation metrics:\")\n",
    "print(\"Accuracy score:\", accuracy_score(y_test, pred))\n",
    "print(\"Precision score:\", precision_score(y_test, pred, average='weighted'))\n",
    "print(\"Recall score:\", recall_score(y_test, pred, average='weighted'))\n",
    "print(\"F1 score:\", f1_score(y_test, pred, average='weighted'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ec1830b",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8f7895d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_dt = DecisionTreeClassifier()\n",
    "clf_dt.fit(X_train, y_train)\n",
    "y_pred_dt = clf_dt.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c272162e",
   "metadata": {},
   "source": [
    "# Evaluation metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1d9ae031",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree model evaluation metrics:\n",
      "Accuracy score: 0.9998756775573127\n",
      "Precision score: 0.9998756744842818\n",
      "Recall score: 0.9998756775573127\n",
      "F1 score: 0.9998756751376013\n"
     ]
    }
   ],
   "source": [
    "print(\"Decision Tree model evaluation metrics:\")\n",
    "print(\"Accuracy score:\", accuracy_score(y_test, y_pred_dt))\n",
    "print(\"Precision score:\", precision_score(y_test, y_pred_dt, average='weighted'))\n",
    "print(\"Recall score:\", recall_score(y_test, y_pred_dt, average='weighted'))\n",
    "print(\"F1 score:\", f1_score(y_test, y_pred_dt, average='weighted'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb48156f",
   "metadata": {},
   "source": [
    "# SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49f021d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "clf_svm = svm.SVC(kernel='linear')\n",
    "clf_svm.fit(X_train, y_train)\n",
    "y_pred_svm = clf_svm.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606ea23f",
   "metadata": {},
   "source": [
    "# Evaluation metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4bcf436",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"SVM model evaluation metrics:\")\n",
    "print(\"Accuracy score:\", accuracy_score(y_test, y_pred_svm))\n",
    "print(\"Precision score:\", precision_score(y_test, y_pred_svm, average='weighted'))\n",
    "print(\"Recall score:\", recall_score(y_test, y_pred_svm, average='weighted'))\n",
    "print(\"F1 score:\", f1_score(y_test, y_pred_svm, average='weighted'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c491abfb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
